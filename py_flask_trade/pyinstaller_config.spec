# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['starter.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('app', 'app'),  # 包含整个app目录
        ('.flaskenv', '.'),  # Flask环境配置
        ('.development.env', '.'),  # 开发环境配置
    ],
    hiddenimports=[
        'flask',
        'flask_cors',
        'flask_socketio',
        'flask_sqlalchemy',
        'flask_redis',
        'redis',
        'gevent',
        'gevent.websocket',
        'gevent.monkey',
        'gevent.builtins',
        'gevent.threading',
        'gevent.socket',
        'gevent.select',
        'gevent.ssl',
        'gevent.subprocess',
        'gevent.signal',
        'gevent.os',
        'gevent.time',
        'gevent.queue',
        'gevent.event',
        'gevent.lock',
        'gevent.local',
        'gevent.greenlet',
        'gevent.pool',
        'gevent.backdoor',
        'gevent.server',
        'gevent.wsgi',
        'gevent.pywsgi',
        'gevent.baseserver',
        'gevent.streamserver',
        'gevent.datasocket',
        'gevent.fileobject',
        'gevent.resolver',
        'gevent.resolver_thread',
        'gevent.resolver_ares',
        'gevent.resolver_dnspython',
        'gevent.resolver_system',
        'gevent.resolver_gevent',
        'gevent.resolver_thread',
        'gevent.resolver_ares',
        'gevent.resolver_dnspython',
        'gevent.resolver_system',
        'gevent.resolver_gevent',
        'pydantic',
        'spectree',
        'lin',
        'lin.apidoc',
        'lin.cms',
        'lin.cms.model',
        'lin.cms.model.user',
        'lin.cms.model.group',
        'lin.cms.model.permission',
        'lin.cms.model.user_group',
        'lin.cms.model.user_identity',
        'lin.cms.model.group_permission',
        'sqlalchemy',
        'sqlalchemy.orm',
        'sqlalchemy.sql',
        'sqlalchemy.ext.declarative',
        'sqlalchemy.pool',
        'sqlalchemy.engine',
        'sqlalchemy.event',
        'sqlalchemy.pool.impl',
        'sqlalchemy.dialects.sqlite',
        'sqlalchemy.dialects.mysql',
        'sqlalchemy.dialects.postgresql',
        'sqlalchemy.dialects.oracle',
        'sqlalchemy.dialects.mssql',
        'sqlalchemy.dialects.sybase',
        'sqlalchemy.dialects.informix',
        'sqlalchemy.dialects.db2',
        'sqlalchemy.dialects.firebird',
        'sqlalchemy.dialects.maxdb',
        'sqlalchemy.dialects.access',
        'sqlalchemy.dialects.monetdb',
        'sqlalchemy.dialects.ingres',
        'sqlalchemy.dialects.sqlite.pysqlite',
        'sqlalchemy.dialects.mysql.pymysql',
        'sqlalchemy.dialects.postgresql.psycopg2',
        'sqlalchemy.dialects.oracle.cx_oracle',
        'sqlalchemy.dialects.mssql.pyodbc',
        'sqlalchemy.dialects.sybase.pyodbc',
        'sqlalchemy.dialects.informix.informixdb',
        'sqlalchemy.dialects.db2.ibm_db_sa',
        'sqlalchemy.dialects.firebird.kinterbasdb',
        'sqlalchemy.dialects.maxdb.sapdb',
        'sqlalchemy.dialects.access.pyodbc',
        'sqlalchemy.dialects.monetdb.pymonetdb',
        'sqlalchemy.dialects.ingres.ingres',
        'pymysql',
        'dotenv',
        'python_dotenv',
        'werkzeug',
        'jinja2',
        'itsdangerous',
        'click',
        'blinker',
        'markupsafe',
        'six',
        'typing_extensions',
        'importlib_metadata',
        'importlib_resources',
        'zipp',
        'packaging',
        'pyparsing',
        'setuptools',
        'wheel',
        'certifi',
        'charset_normalizer',
        'idna',
        'urllib3',
        'requests',
        'pyyaml',
        'toml',
        'tomli',
        'attrs',
        'iniconfig',
        'pluggy',
        'py',
        'mccabe',
        'pycodestyle',
        'pyflakes',
        'cfgv',
        'identify',
        'nodeenv',
        'virtualenv',
        'distlib',
        'filelock',
        'platformdirs',
        'black',
        'isort',
        'coverage',
        'pytest',
        'pytest_ordering',
        'flake8',
        'watchdog',
        'pre_commit',
        'aioredis',
        'hiredis',
        'easytrader',
        'flask_apscheduler',
        'apscheduler',
        'tzlocal',
        'tzdata',
        'pytz',
        'pytz_deprecation_shim',
        'backports.zoneinfo',
        'alembic',
        'mako',
        'flask_migrate',
        'flask_sqlacodegen',
        'inflect',
        'more_itertools',
        'typeguard',
        'python_socketio',
        'python_engineio',
        'bidict',
        'simple_websocket',
        'wsproto',
        'h11',
        'async_timeout',
        'tablib',
        'wtforms',
        'flask_jwt_extended',
        'pyjwt',
        'email_validator',
        'dnspython',
        'greenlet',
        'pillow',
        'numpy',
        'pandas',
        'python_dateutil',
        'pyquery',
        'cssselect',
        'lxml',
        'comtypes',
        'pywinauto',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='flask_cms_app',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,  # Hide console window
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
) 